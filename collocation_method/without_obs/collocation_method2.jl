using JuMP
using Ipopt
# using NLopt
using PyPlot
using FastGaussQuadrature
using CSV
N = 15
weight = gaussradau(N)
# weight = gausslobatto(N)
coe = weight[2]    # interpolation coefficient
print(weight)
dl=[[-56.499714 -12.377855 2.768698 -1.106282 0.571361 -0.341727 0.224796 -0.158026 0.116554 -0.089001 0.069569 -0.054994 0.043207 -0.032573 0.020963],
    [76.723819 -0.254606 -9.878076 3.227467 -1.559589 0.904695 -0.585341 0.407402 -0.298568 0.227012 -0.176923 0.139572 -0.109504 0.082483 -0.053060],
    [-31.314878 18.023393 -0.264409 -7.227773 2.709658 -1.431507 0.884350 -0.599462 0.432141 -0.325028 0.251454 -0.197366 0.154325 -0.115986 0.074520],
    [18.456314 -8.685702 10.661521 -0.280872 -5.825609 2.351134 -1.309984 0.842420 -0.588848 0.434332 -0.331700 0.258092 -0.200637 0.150248 -0.096354],
    [-12.838605 5.653539 -5.383393 7.846610 -0.306655 -5.029235 2.126907 -1.228167 0.811964 -0.579513 0.433433 -0.332666 0.256293 -0.190885 0.122032],
    [9.864875 -4.213279 3.653817 -4.068378 6.461157 -0.343523 -4.576403 1.999733 -1.184663 0.798618 -0.577529 0.433997 -0.329905 0.243666 -0.155161],
    [-8.125112 3.413312 -2.826236 2.838237 -3.421306 5.730074 -0.396829 -4.352702 1.948641 -1.176219 0.803218 -0.583752 0.434809 -0.317281 0.200831],
    [7.063911 -2.937342 2.369221 -2.257054 2.443056 -3.096286 5.382596 -0.474603 -4.310144 1.965585 -1.202144 0.825646 -0.595561 0.426737 -0.267631],
    [-6.426535 2.656225 -2.106828 1.946309 -1.992553 2.262862 -2.972758 5.317245 -0.592018 -4.440273 2.053287 -1.264717 0.863909 -0.601305 0.371925],
    [6.097878 -2.508819 1.968965 -1.783646 1.766911 -1.895322 2.229440 -3.012775 5.516832 -0.778208 -4.769864 2.226011 -1.367800 0.905581 -0.547491],
    [-6.031013 2.474373 -1.927361 1.723690 -1.672201 1.734345 -1.926453 2.331571 -3.228101 6.035640 -1.096032 -5.374842 2.513362 -1.506425 0.874932],
    [6.245316 -2.556665 1.981861 -1.756747 1.681226 -1.707234 1.834005 -2.097647 2.604574 -3.689688 7.040639 -1.702924 -6.428847 2.960947 -1.581158],
    [-6.851381 2.800702 -2.163653 1.906862 -1.808532 1.812007 -1.907331 2.112655 -2.484146 3.165602 -4.596915 8.976320 -3.087047 -8.348682 3.517316],
    [8.214887 -3.357343 2.586419 -2.271782 2.142498 -2.129100 2.214169 -2.408103 2.750517 -3.333859 4.383078 -6.576846 13.280986 -7.462383 -12.214238],
    [-12.081556 4.930846 -3.797644 3.327933 -3.129796 3.097081 -3.201153 3.450153 -3.886393 4.605346 -5.815159 8.022501 -12.782133 27.901366 -38.957642],
    [7.499296 -3.062455 2.356428 -2.064737 1.940363 -1.918263 1.979989 -2.129695 2.391658 -2.820345 3.531588 -4.794046 7.354473 -14.095827 48.689876]]

num = N+1
q0 = (0.0, 0.0, 0.0) #initial configuration
qf = (40.0, 40.0, 2.0) # final configuration
xlb = -10.0*ones(num,1)
xub = 80.0*ones(num,1)
ylb = -10.0*ones(num,1)
yub = 80.0*ones(num,1)
θlb = -pi*ones(num,1)
θub = pi*ones(num,1)
xlb[1] = q0[1]
xub[1] = q0[1]
ylb[1] = q0[2]
yub[1] = q0[2]
θlb[1] = q0[3]
θub[1] = q0[3]
xlb[num] = qf[1]
xub[num] = qf[1]
ylb[num] = qf[2]
yub[num] = qf[2]
θlb[num] = qf[3]
θub[num] = qf[3]
L = 2.84
vel = 10.0
x_obs = 20.0
y_obs = 20.0
r_obs = 10
# # #
mdl = Model(solver = IpoptSolver())  # set model
# # # mdl = Model(solver=NLoptSolver(algorithm=:LD_SLSQP))
@variable(mdl, x[i=1:num],lowerbound=xlb[i], upperbound=xub[i])
@variable(mdl, y[i=1:num],lowerbound=ylb[i], upperbound=yub[i])
@variable(mdl, θ[i=1:num],lowerbound=θlb[i], upperbound=θub[i])     # heading
@variable(mdl, -0.44<= u[i=1:num] <= 0.44) # steering control bound
@variable(mdl, 0.1<= tf <= 50.0)
# # # # dynamic constraint
for i=1:N
    @NLconstraint(mdl, 2*sum(dl[j][i]*x[j] for j=1:num )/tf == vel*cos(θ[i]))
    @NLconstraint(mdl, 2*sum(dl[j][i]*y[j] for j=1:num )/tf == vel*sin(θ[i]))
    @NLconstraint(mdl, 2*sum(dl[j][i]*θ[j] for j=1:num )/tf == vel*tan(u[i])/L)
end
# for i=2:N-1
#     @NLconstraint(mdl, (x[i]-x_obs)^2 + (y[i]-y_obs)^2 >= r_obs^2)
# end
# # # # bound constraint
# # @constraint(mdl, x[1] == q0[1])
# # @constraint(mdl, y[1] == q0[2])
# # @constraint(mdl, θ[1] == q0[1])
# # @constraint(mdl, x[N] == qf[1])
# # @constraint(mdl, y[N] == qf[2])
# # @constraint(mdl, θ[N] == qf[3])
# #
@NLobjective(mdl, Min,
            0.1*tf + tf/2*sum(u[i]^2*coe[i] for i=1:N))
# #
# #
@time status = solve(mdl)
x_v = getvalue(x)
y_v = getvalue(y)
θ_v = getvalue(θ)
print("after solve: \n",
      "x: ", getvalue(x), "\n",
      "y: ", getvalue(y), "\n",
      "θ: ", getvalue(θ), "\n",
      "u: ", getvalue(u), "\n",
      "tf: ", getvalue(tf), "\n")

function Lagrange_func(var, t)
    l = zeros(num)
    l[1] = 0.5120313830e1 * (-0.3081664099e2 * t - 0.2981664099e2) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[2] = 0.1274797977e2 * (0.3081664099e2 * t + 0.3081664099e2) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[3] = -0.5698966351e2 * (0.9311420457e1 * t + 0.9311420457e1) * (t + 0.96755e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[4] = 0.1426340517e3 * (0.4518466975e1 * t + 0.4518466975e1) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[5] = -0.2761656002e3 * (0.2708404993e1 * t + 0.2708404993e1) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[6] =0.4617450639e3 * (0.1836051608e1 * t + 0.1836051608e1) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[7] =-0.7019302644e3 * (0.1351484673e1 * t + 0.1351484673e1) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[8] = 0.9985120758e3 * (0.1056496912e1 * t + 0.1056496912e1) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[9] = -0.1353803085e4 * (0.8654928852e0 * t + 0.8654928852e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[10] = 0.1772903532e4 * (0.7366715852e0 * t + 0.7366715852e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[11] = -0.2268127341e4 * (0.6477392927e0 * t + 0.6477392927e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[12] = 0.2869254417e4 * (0.5860325014e0 * t + 0.5860325014e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[13] = -0.3651961545e4 * (0.5440610567e0 * t + 0.5440610567e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.932997e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[14] =0.4844098054e4 * (0.5173313771e0 * t + 0.5173313771e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.987166e0) * (t - 0.10e1)
    l[15] =-0.7526538783e4 * (0.5032292219e0 * t + 0.5032292219e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.10e1)
    l[16] = 0.4733621108e4 * (0.5000000000e0 * t + 0.5000000000e0) * (t + 0.96755e0) * (t + 0.892605e0) * (t + 0.778686e0) * (t + 0.630779e0) * (t + 0.455353e0) * (t + 0.260073e0) * (t + 0.534757e-1) * (t - 0.155411e0) * (t - 0.357457e0) * (t - 0.543831e0) * (t - 0.70639e0) * (t - 0.838029e0) * (t - 0.932997e0) * (t - 0.987166e0)
    result = 0.0
    for i=1:num
        result += var[i]*l[i]
    end
    return result
end
# # # plot
τ = -1:0.01:1
X = zeros(length(τ))
Y = zeros(length(τ))
s = zeros(length(τ))
θ_val = zeros(length(τ))
for i=1:length(τ)
    X[i] = Lagrange_func(x_v, τ[i])
    Y[i] = Lagrange_func(y_v, τ[i])
    θ_val[i] = Lagrange_func(θ_v, τ[i])
    if i > 1
        s[i] = s[i-1] + hypot(X[i] - X[i-1], Y[i]-Y[i-1])
    end
end


rfig = figure("path")
rx = rfig[:add_subplot](1,1,1)
rx[:plot](X, Y)
θo = -3.1:0.1:3.14
xo = x_obs*ones(length(θo)) + r_obs*cos(θo)
yo = y_obs*ones(length(θo)) + r_obs*sin(θo)
rx[:plot](xo, yo)
rx[:scatter](x_v, y_v)

# θo = -3.1:0.1:3.14
# xo = x_obs*ones(length(θo)) + r_obs*cos(θo)
# yo = y_obs*ones(length(θo)) + r_obs*sin(θo)
# rx[:plot](xo, yo)
# #
# #
# # s_val = 0:h:p_val[5]
# # ks = b_val*s_val + c_val*s_val.^2 + d_val*s_val.^3 + e_val*s_val.^4 + f_val*s_val.^5
# #
# # kfig = figure("kppa")
# # kx = kfig[:add_subplot](1,1,1)
# # kx[:plot](s_val, ks)
# #
# # tha = b_val/2*(s_val.^2) + c_val/3*(s_val.^3) + d_val/4*(s_val.^4) + e_val/5*s_val.^5 + f_val/6*s_val.^6
# #
tfig = figure("theta")
tx = tfig[:add_subplot](1,1,1)
tx[:plot](s, θ_val)
